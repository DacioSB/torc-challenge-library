apiVersion: v1
kind: ConfigMap
metadata:
  name: booklibrary-api-config
data:
  ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=booklibrary;Username=postgres;Password=postgres"
  Cors__AllowedOrigins: "http://9.169.24.177"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booklibrary-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booklibrary-api
  template:
    metadata:
      labels:
        app: booklibrary-api
    spec:
      imagePullSecrets:
      - name: acr-secret
      initContainers:
      - name: migrations
        image: torcmydocitu.azurecr.io/booklibrary-api-migrations:1.0.0
        command: ["dotnet", "ef", "database", "update"]
        envFrom:
        - configMapRef:
            name: booklibrary-api-config
      containers:
      - name: booklibrary-api
        image: torcmydocitu.azurecr.io/booklibrary-api:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: booklibrary-api-config
---
apiVersion: v1
kind: Service
metadata:
  name: booklibrary-api
spec:
  selector:
    app: booklibrary-api
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booklibrary-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booklibrary-frontend
  template:
    metadata:
      labels:
        app: booklibrary-frontend
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: booklibrary-frontend
        image: torcmydocitu.azurecr.io/booklibrary-frontend:1.0.0
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: booklibrary-frontend
spec:
  selector:
    app: booklibrary-frontend
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: booklibrary-frontend-ingress
  annotations: {}
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: booklibrary-frontend
            port:
              number: 80
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: booklibrary
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: booklibrary-api-ingress
  annotations:
    # No rewrite-target needed for API, as we want to pass the full path
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /api # This path will be routed to the backend API
        pathType: Prefix
        backend:
          service:
            name: booklibrary-api
            port:
              number: 80